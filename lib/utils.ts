import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

/**
 * Combina y normaliza clases CSS utilizando las bibliotecas clsx y tailwind-merge.
 *
 * @param inputs - Una lista de valores de clase que se combinarán.
 * @returns Una cadena de texto que contiene las clases CSS combinadas y normalizadas.
 */

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}


/**
 * Verifica si una cadena de datos es una URL de Datos (Data URL) de una imagen en formato base64.
 *
 * @param imageData - La cadena de datos que se verificará.
 * @returns true si imageData es una URL de Datos de imagen en formato base64, false en caso contrario.
 */

export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

/**
 * Formatea una cadena de fecha en un formato más legible.
 *
 * @param dateString - La cadena de fecha en formato ISO.
 * @returns Una cadena de texto que representa la fecha en un formato más legible.
 */

export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

/**
 * Formatea un número de hilos en una cadena de texto legible.
 *
 * @param count - El número de hilos.
 * @returns Una cadena de texto que representa el número de hilos en un formato más legible.
 */

export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}